# -*- coding: utf-8 -*-
"""DBA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ew2A_2VQs4nsz3gcYlh71pyrUDTZZMwT
"""

import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats as stats
import seaborn as sns
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_selection  import SelectKBest,chi2
import datetime

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/

cab=pd.read_csv("cab_rides.csv")

cab.head()

"""##Data cleaning"""

cab.shape

cab.info()

cab.isnull().sum()

cab['price'].mean()
cab['price'].mode()
cab.median()

cab

#cab.fillna(cab.mode())

cab.dropna(inplace=True)







cab.describe().T

categorical_feature = cab.dtypes==object
final_categorical_feature = cab.columns[categorical_feature].tolist()

"""##visualisation"""

plt.figure(figsize=(40, 15))
sns.countplot(x = "price", data = cab)
cab.loc[:, 'price'].value_counts()

sns.countplot(x='surge_multiplier', data = cab)
cab.loc[:, 'surge_multiplier'].value_counts()

"""Graphs for Numerical columns """

final_numeric_feature = ['distance', 'time_stamp', 'price', 'surge_multiplier']
cab[final_numeric_feature].plot(kind='density', subplots=True, layout=(6,9), sharex=False, figsize= (32,32))
plt.show()

"""Graphs for Categorical columns"""

final_categorical_feature_1=['cab_type','destination','source','product_id','name','location']

for i in range(len(final_categorical_feature_1)):
    cab[final_categorical_feature[i]].value_counts().plot(kind='bar')
    plt.xticks(rotation='vertical')
    plt.ylabel(final_categorical_feature[i])
    plt.show()

def preprocess(data, col):
    plt.figure(figsize=(10,8))
    plt.subplot(2,1,1)
    data[col].plot(kind='box', subplots=True, sharex=False, vert=False)
    plt.subplot(2,1,2)
    data[col].plot(kind='density', subplots=True, sharex=False)
    plt.show()
for i in range(len(final_numeric_feature)):
    preprocess(cab[final_numeric_feature], final_numeric_feature[i])

for column in final_numeric_feature:
    sns.boxplot(cab[column])
    plt.show()

plt.figure(figsize=(30,30))
sns.pairplot(cab,hue='surge_multiplier')

"""##descriptive analysis"""

cab.mean()
cab.mode()
cab.median()

cab.medain()

cab.mode()

cab['price'].mean()
cab['price'].mode()
cab.median()

cab.describe()

"""taking data with specified columns"""

cab_data = cab[['distance', 'cab_type', 'time_stamp', 'destination', 'source', 'price',
       'surge_multiplier', 'name']]

cab_data.head()

cab_data["rounded_timestamp"] = cab_data["time_stamp"] / 1000
cab_data["rounded_timestamp"] = cab_data["rounded_timestamp"].apply(np.floor)

cab_data["date"] = cab_data["rounded_timestamp"].apply(lambda x : datetime.datetime.fromtimestamp(x).date())
cab_data["time"] = cab_data["rounded_timestamp"].apply(lambda x: datetime.datetime.fromtimestamp(x).time())
cab_data['weekday'] = cab_data['date'].apply(lambda x: x.weekday())
cab_data["weekday"] = cab_data["weekday"].map({0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'})
cab_data['hour'] = cab_data['time'].apply(lambda time: time.hour)

cab_data.loc[(cab_data.hour >= 6) & (cab_data.hour < 12) , 'time_of_day'] = 'Morning'
cab_data.loc[(cab_data.hour >= 12) & (cab_data.hour < 15) , 'time_of_day'] = 'Afternoon'
cab_data.loc[(cab_data.hour >= 15) & (cab_data.hour < 18) , 'time_of_day'] = 'Evening'
cab_data.loc[(cab_data.hour >= 18) | (cab_data.hour < 6) , 'time_of_day'] = 'Night'

cab_df = cab_data[['distance', 'cab_type', 'time_stamp', 'destination', 'source', 'price',
       'surge_multiplier', 'name', 'date', 'time', 'weekday', 'hour', 'time_of_day']]

cab_data["time_stamp"]

cab_data['cab_type'].value_counts()

"""## individual analysis

"""

uber_data = cab_data[cab_data['cab_type'] =="Uber"]
lyft_data = cab_data[cab_data['cab_type'] =="Lyft"]

lyft_data = cab_data[cab_data["cab_type"] == "Lyft"]
uber_data = cab_data[cab_data['cab_type'] == "Uber"]

uber_corr = uber_data[["distance", "price", "surge_multiplier"]]
lyft_corr = lyft_data[["distance", "price", "surge_multiplier"]]

sns.heatmap(uber_corr.corr(),cmap="BuPu")

sns.heatmap(lyft_corr.corr(),cmap="BuPu")

uber_corr = uber_data[["distance", "price", "surge_multiplier","cab_type","time_stamp","destination","source","name"]]
lyft_corr = lyft_data[["distance", "price", "surge_multiplier","cab_type","time_stamp","destination","source","name"]]

sns.heatmap(uber_corr.corr(),cmap="YlGnBu")

sns.heatmap(lyft_corr.corr(),cmap="YlGnBu")

uber_data["surge_multiplier"].value_counts()
lyft_data["surge_multiplier"].value_counts()

high_surge_dataset = lyft_data[lyft_data["surge_multiplier"]> 1]

t_high_surge = pd.DataFrame(high_surge_dataset.groupby(["weekday", "surge_multiplier"]).size().reset_index())
t_high_surge.columns = ["Weekday", "Surge", "Count"]
plt.figure(figsize=(15, 5))
sns.barplot(x="Weekday", y="Count", hue="Surge", data=t_high_surge).set_title("Weekday wise Surge");

td_high_surge = pd.DataFrame(high_surge_dataset.groupby(["weekday", "surge_multiplier","time_of_day"]).size().reset_index())
td_high_surge.columns = ["Weekday", "Surge", "Time of Day", "Count"]

plt.figure(figsize=(15, 10))
sns.lineplot(x="Time of Day", y="Count", hue="Surge", data=td_high_surge).set_title("Time of Day wise Surge");

uber_dis_price_surge = uber_data[['distance', 'surge_multiplier', 'price']]
lyft_dis_price_surge = lyft_data[['distance', 'surge_multiplier', 'price']]

plt.figure(figsize=(15, 15))
sns.scatterplot(data=uber_dis_price_surge, x="distance", y="price", hue="surge_multiplier").set_title("Uber - Distance Vs Price");

plt.figure(figsize=(15, 10))
sns.scatterplot(data=lyft_dis_price_surge, x="distance", y="price", hue="surge_multiplier").set_title("Lyft - Distance Vs Price");

"""#for uber"""

uber_s_d_df= uber_data.groupby(['source', "destination"]).size().reset_index()
uber_s_d_df.columns = ["source", "destination", "count"]
uber_s_d_df.sort_values("count", inplace=True, ascending = False)
uber_five_most = uber_s_d_df.iloc[0:5, ]
uber_five_most["Source - Destination"] = uber_s_d_df["source"] + " - " + uber_s_d_df["destination"]

# So the top five most Source - Destination for Uber
uber_five_most = uber_five_most[["Source - Destination", "count"]]
uber_five_most

"""#for lyft"""

lyft_s_d_df= lyft_data.groupby(['source', "destination"]).size().reset_index()
lyft_s_d_df.columns = ["source", "destination", "count"]
lyft_s_d_df.sort_values("count", inplace=True, ascending = False)
lyft_five_most = lyft_s_d_df.iloc[0:5, ]
lyft_five_most["Source - Destination"] = lyft_s_d_df["source"] + " - " + lyft_s_d_df["destination"]

# So the top five most Source - Destination for lyft
lyft_five_most = lyft_five_most[["Source - Destination", "count"]]
lyft_five_most

"""Which destinations attract more surge and which are least
Here we pick only those rows which have surge greater than or equal to 2
"""

high_surge_rows = cab_df[cab_df["surge_multiplier"] >= 2]
loc_wise_surge = high_surge_rows.groupby(["source", "destination"]).size().reset_index()

loc_wise_surge.columns=["source", "destination", "count"]
loc_wise_surge.sort_values(inplace=True, ascending=False, by=["count"])


highest_destination_surge = loc_wise_surge.head(5)
lowest_destination_surge = loc_wise_surge.tail(5)
# highest_destination_surge
destination_surge_df = highest_destination_surge.append(lowest_destination_surge, ignore_index=True)
destination_surge_df["source - destination"] = destination_surge_df["source"] + " " + destination_surge_df["destination"]
plt.figure(figsize=(20, 10))
g = sns.barplot(data = destination_surge_df, x = "source - destination", y = "count")
g.set_title("Top and least 5 source - destinations for surge")
loc, labels = plt.xticks()
g.set_xticklabels(labels, rotation=60);

"""###shared rides"""

lyft_data["name"].value_counts()

lyft_shared_rides_df = lyft_data[lyft_data["name"] == "Shared"]
lyft_shared_ride_td = lyft_shared_rides_df.groupby(["name", "time_of_day"]).size().reset_index()
lyft_shared_ride_td.columns = ["Name", "Time of Day", "Count"]
plt.figure(figsize=(15, 5))
sns.barplot(y="Time of Day", x="Count", data=lyft_shared_ride_td, palette="Blues_d", orient ='h' ).set_title("Shared Rides wrt Time of Day");

lyft_shared_rides_distance_price = lyft_shared_rides_df.groupby(["name", "distance", "price"]).size().reset_index()
lyft_shared_rides_distance_price.columns = ["name", "distance", "price", "count"]

lyft_shared_rides_distance_price

plt.figure(figsize=(15, 8))
sns.scatterplot(data = lyft_shared_rides_distance_price, x = "distance", y="price", hue="count", size="count").set_title("Lyft Rides - Distance vs Price - Count");



"""forecasting prices"""

dist_uber=(uber_data.distance)
dist_lyft= lyft_data.distance

price_uber=uber_data.price
price_lyft =lyft_data.price

time_uber =uber_data.time_stamp
time_lyft =lyft_data.time_stamp

dist_uber_unique =sorted(dist_uber.unique())
dist_lyft_unique =sorted(dist_lyft.unique())

"""dividing data sets into four parts for both uber and lyft"""

Dict_uber ={'Distance': dist_uber,'price': price_uber,'time':time_uber }



Dict_uber1={'Distance':Uber_00to06_distance,'Price':Uber_00to06_price}







"""next part

understanding with weather
"""

cab=pd.read_csv("cab_rides.csv")
weather=pd.read_csv("weather.csv")

cab["time_stamp"] = cab["time_stamp"] / 1000
cab["time_stamp"] = cab["time_stamp"].apply(np.floor)

cab["time_stamp"] = cab["time_stamp"].astype(int)
weather.columns = ['temp', 'source', 'clouds', 'pressure', 'rain', 'time_stamp', 'humidity', 'wind']
weather.isnull().sum()

merged_data=pd.merge(weather, cab, on=["source", "time_stamp"])

"""understanding count and temperature effect"""

tmp_merged_data = merged_data[['temp', 'source', 'time_stamp', 'cab_type', 'destination',
       'surge_multiplier',  'name']]
tmp_merged_data_g =  tmp_merged_data.groupby(["temp", "source"]).size().reset_index()
tmp_merged_data_g.columns = ["temp", "source", "count"]
plt.figure(figsize=(15, 10))
sns.scatterplot( data = tmp_merged_data_g, x ="temp", y = "count", size="count", hue="count");

"""understanding count and rain effect"""

rain_merged_data = merged_data[['source', 'time_stamp', 'cab_type',  "rain"]]
len(rain_merged_data)
rain_merged_data.isnull().sum()

rain_merged_data["rain"] = rain_merged_data["rain"].fillna(value=0)

t_rain = rain_merged_data.groupby(["rain"]).size().reset_index()
t_rain.columns=["rain", "count"]
plt.figure(figsize=(15, 10))
sns.scatterplot(data = t_rain, x = "rain", y="count", hue="count", size="count")

rain_merged_data.head()

"""which company get more rides during rain"""

only_rain_data = rain_merged_data[rain_merged_data["rain"] != 0]
print(len(only_rain_data))

c_only_rain = only_rain_data.groupby(["cab_type"]).size().reset_index()
c_only_rain.columns = ["cab_type", "count"]
sns.barplot(x ="cab_type", y="count", data=c_only_rain).set_title("Uber vs Lyft - Who gets more rides");
